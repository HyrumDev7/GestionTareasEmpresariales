// Prisma Schema - TaskMaster Pro
// Documentation: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================
// USER MODEL
// ============================================
model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String   // Hashed with bcrypt
  name      String
  role      Role     @default(USER)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  ownedProjects Project[]      @relation("ProjectOwner")
  assignedTasks Task[]         @relation("TaskAssignee")

  @@map("users")
  @@index([email])
  @@index([role])
}

enum Role {
  ADMIN    // Full access to everything
  MANAGER  // Can manage projects and assign tasks
  USER     // Can only view/edit assigned tasks
}

// ============================================
// PROJECT MODEL
// ============================================
model Project {
  id          String        @id @default(uuid())
  name        String
  description String?
  status      ProjectStatus @default(ACTIVE)
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  ownerId String
  owner   User   @relation("ProjectOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  tasks   Task[]

  @@map("projects")
  @@index([ownerId])
  @@index([status])
}

enum ProjectStatus {
  ACTIVE
  COMPLETED
  ARCHIVED
  ON_HOLD
}

// ============================================
// TASK MODEL
// ============================================
model Task {
  id          String     @id @default(uuid())
  title       String
  description String?
  status      TaskStatus @default(TODO)
  priority    Priority   @default(MEDIUM)
  dueDate     DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  projectId    String
  project      Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  assignedToId String?
  assignedTo   User?   @relation("TaskAssignee", fields: [assignedToId], references: [id], onDelete: SetNull)

  @@map("tasks")
  @@index([projectId])
  @@index([assignedToId])
  @@index([status])
  @@index([priority])
  @@index([dueDate])
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  IN_REVIEW
  DONE
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}